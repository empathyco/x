@use "sass:math" as *;

.x-animate-scale {
  $p: &;

  &--enter-active,
  &--leave-active,
  &--enter-active *,
  &--leave-active * {
    animation-duration: var(--x-duration-animation, 0.3s);
    animation-timing-function: linear;
  }

  &--enter-active,
  &--leave-active {
    overflow: hidden;
    &#{$p}--top,
    &#{$p}--bottom,
    &#{$p}--top-to-bottom,
    &#{$p}--bottom-to-top {
      animation-name: containerAnimationY;
    }
    &#{$p}--top > *,
    &#{$p}--bottom > *,
    &#{$p}--top-to-bottom > *,
    &#{$p}--bottom-to-top > * {
      animation-name: contentAnimationY;
    }
    &#{$p}--left,
    &#{$p}--right,
    &#{$p}--left-to-right,
    &#{$p}--right-to-left {
      animation-name: containerAnimationX;
    }
    &#{$p}--left > *,
    &#{$p}--right > *,
    &#{$p}--left-to-right > *,
    &#{$p}--right-to-left > * {
      animation-name: contentAnimationX;
    }
  }

  &--leave-active,
  &--leave-active > * {
    animation-direction: reverse;
  }

  $origins: top, bottom, left, right;
  @each $origin in $origins {
    &--#{$origin} {
      &#{$p}--enter-active,
      &#{$p}--leave-active,
      &#{$p}--enter-active > *,
      &#{$p}--leave-active > * {
        transform-origin: $origin center;
      }
    }
  }

  &--top-to-bottom,
  &--top-to-bottom > * {
    &#{$p}--enter-active {
      transform-origin: top center;
    }
    &#{$p}--leave-active {
      transform-origin: bottom center;
    }
  }

  &--bottom-to-top,
  &--bottom-to-top > * {
    &#{$p}--enter-active {
      transform-origin: bottom center;
    }
    &#{$p}--leave-active {
      transform-origin: top center;
    }
  }

  &--left-to-right,
  &--left-to-right > * {
    &#{$p}--enter-active {
      transform-origin: left center;
    }
    &#{$p}--leave-active {
      transform-origin: right center;
    }
  }

  &--right-to-left,
  &--right-to-left > * {
    &#{$p}--enter-active {
      transform-origin: right center;
    }
    &#{$p}--leave-active {
      transform-origin: left center;
    }
  }
}

@function easeInOut($x) {
  @if $x < 0.5 {
    @return 8 * $x * $x * $x * $x;
  } @else {
    $x: $x - 1;
    @return 1 - (8 * $x * $x * $x * $x);
  }
}
$steps: 18;
@keyframes containerAnimationY {
  @for $step from 0 through $steps {
    $scale: easeInOut(div($step, $steps));
    #{$step * div(100, $steps)}% {
      transform: scaleY(#{$scale});
    }
  }
}

@keyframes contentAnimationY {
  @for $step from 0 through $steps {
    $scale: easeInOut(div($step, $steps));
    $invScale: if($scale > 0, div(1, $scale), 99999999);
    #{$step * div(100, $steps)}% {
      transform: scaleY(#{$invScale});
    }
  }
}

@keyframes containerAnimationX {
  @for $step from 0 through $steps {
    $scale: easeInOut(div($step, $steps));
    #{$step * div(100, $steps)}% {
      transform: scaleX(#{$scale});
    }
  }
}

@keyframes contentAnimationX {
  @for $step from 0 through $steps {
    $scale: easeInOut(div($step, $steps));
    $invScale: if($scale > 0, div(1, $scale), 99999999);
    #{$step * div(100, $steps)}% {
      transform: scaleX(#{$invScale});
    }
  }
}
